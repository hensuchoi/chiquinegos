rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidBusiness() {
      let requiredFields = ['name', 'description', 'ownerId', 'contactInfo', 'location', 'images'];
      let hasRequired = requiredFields.every(field => request.resource.data[field] != null);
      
      return hasRequired 
        && request.resource.data.name.size() >= 3
        && request.resource.data.description.size() >= 10
        && request.resource.data.images.size() >= 1;
    }
    
    function isValidReview() {
      return request.resource.data.rating >= 1 
        && request.resource.data.rating <= 5
        && request.resource.data.comment.size() > 0;
    }

    // Business rules
    match /businesses/{businessId} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && isOwner(request.resource.data.ownerId)
        && isValidBusiness();
      allow update: if isAuthenticated() 
        && isOwner(resource.data.ownerId)
        && isValidBusiness();
      allow delete: if isAuthenticated() 
        && isOwner(resource.data.ownerId);
      
      // Reviews subcollection
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated() 
          && isValidReview()
          && !exists(/databases/$(database)/documents/businesses/$(businessId)/reviews/$(request.auth.uid));
        allow update, delete: if isAuthenticated() 
          && isOwner(resource.data.userId);
      }
    }

    // User profiles
    match /users/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(userId);
    }
  }
} 